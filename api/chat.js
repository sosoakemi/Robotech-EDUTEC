import { GoogleGenerativeAI } from "@google/generative-ai";

// Configura√ß√£o da API do Gemini
const API_KEY = "AIzaSyDi3aQ8UTOobPkceJ4pcy1B7x1yzm96XQ4";
const genAI = new GoogleGenerativeAI(API_KEY);

// Configura√ß√£o melhorada do modelo
const model = genAI.getGenerativeModel({ 
  model: "gemini-1.5-flash",
  generationConfig: {
    temperature: 0.9,
    topK: 50,
    topP: 0.98,
    maxOutputTokens: 1024,
  },
  safetySettings: [
    {
      category: "HARM_CATEGORY_HARASSMENT",
      threshold: "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
      category: "HARM_CATEGORY_HATE_SPEECH",
      threshold: "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
      category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      threshold: "BLOCK_MEDIUM_AND_ABOVE",
    },
    {
      category: "HARM_CATEGORY_DANGEROUS_CONTENT",
      threshold: "BLOCK_MEDIUM_AND_ABOVE",
    },
  ],
});

// Prompt personalizado
const SYSTEM_PROMPT = `Voc√™ √© o RoboTech Assistant, um assistente de IA amig√°vel e conversacional. 

REGRAS CR√çTICAS - LEIA COM ATEN√á√ÉO:
- NUNCA use respostas prontas, gen√©ricas ou clich√™s
- NUNCA comece com "Ol√°! Como posso ajudar?" ou similares
- NUNCA use frases como "Posso ajudar com..." ou "Estou aqui para..."
- SEMPRE responda diretamente √† pergunta espec√≠fica do usu√°rio
- Seja natural como se fosse uma pessoa real conversando
- Adapte seu tom ao contexto da pergunta
- Se for sobre programa√ß√£o/tecnologia, seja detalhado e √∫til
- Se for sobre outros assuntos, seja informativo mas acess√≠vel
- Use emojis ocasionalmente para tornar a conversa mais amig√°vel
- Mantenha as respostas em portugu√™s brasileiro
- Seja direto e evite textos muito longos desnecessariamente

EXEMPLO DE COMO N√ÉO RESPONDER:
‚ùå "Ol√°! Como posso ajudar voc√™ hoje?"
‚ùå "Posso ajudar com programa√ß√£o, tecnologia..."
‚ùå "Estou aqui para responder suas perguntas"

EXEMPLO DE COMO RESPONDER:
‚úÖ "Para criar um loop em JavaScript, voc√™ pode usar..."
‚úÖ "A capital do Brasil √© Bras√≠lia, localizada no Distrito Federal..."
‚úÖ "Intelig√™ncia artificial √© um campo da computa√ß√£o que..."

Responda de forma natural e personalizada para cada pergunta espec√≠fica.`;

// Fun√ß√£o para gerar ID √∫nico de sess√£o
function generateSessionId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

export default async function handler(req, res) {
  // Configurar CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  const { message, sessionId } = req.body;
  
  if (!message) {
    return res.status(400).json({ error: 'Mensagem √© obrigat√≥ria' });
  }

  try {
    // Gerar ou usar sessionId existente
    const currentSessionId = sessionId || generateSessionId();
    
    // Construir o prompt com hist√≥rico (simplificado para Vercel)
    let fullPrompt = SYSTEM_PROMPT + "\n\n";
    
    // Adicionar a mensagem atual com instru√ß√£o espec√≠fica
    fullPrompt += `Usu√°rio: ${message}\n\nIMPORTANTE: Responda diretamente √† pergunta do usu√°rio. N√ÉO use sauda√ß√µes gen√©ricas, N√ÉO pergunte como pode ajudar, N√ÉO use frases prontas. Seja direto e natural.\n\nRoboTech:`;
    
    // Gerar resposta
    const result = await model.generateContent(fullPrompt);
    const reply = result?.response?.text() || "Desculpe, n√£o consegui processar sua pergunta. Pode tentar novamente?";
    
    res.status(200).json({ 
      reply: reply.trim(),
      sessionId: currentSessionId 
    });
    
  } catch (error) {
    console.error("Erro no chat:", error);
    res.status(500).json({ 
      reply: "Ops! Algo deu errado. Pode tentar novamente? ü§î",
      sessionId: sessionId || generateSessionId()
    });
  }
}
